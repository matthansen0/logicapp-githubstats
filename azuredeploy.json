{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "ObjectID": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
            "description": "User or Service Principal ID. Open Cloudshell Powershell and run Get-AzADUser -UserPrincipalName *name from the upper right in the portal here*."
        }
    },
    "secretValue": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
            "description": "Value of your Github personal access tolken to be stored in KeyVault."
        }
    },
    "logicAppName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
            "description": "Name of LogicApp to execute jobs."
        }
    },
    "keyVaultName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
            "description": "Name of KeyVault."
        }
    },
    "clonesURI": {
        "type": "string",
        "defaultValue": "https://api.github.com/repos/matthansen0/azure-dnslb/traffic/clones"
    },
    "trafficURI": {
        "type": "string",
        "defaultValue": "https://api.github.com/repos/matthansen0/azure-dnslb/traffic/views"
    }
  },
  "variables": {
        "storageAccountName": "[uniqueString(resourceGroup().id)]",
        "clonesPK": "repoClones",
        "trafficPK": "repoTraffic",
        "keyVaultConnectionFriendlyName": "keyvault",
        "azureTablesConnectionFriendlyName": "azuretables",
        "tenantID": "[subscription().tenantId]"
    },
  "resources": [ 
    {
            "name": "[parameters('keyVaultName')]",
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2016-10-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": true,
                "tenantId": "[variables('tenantID')]",
                "accessPolicies": [
                    {
                        "tenantId": "[variables('tenantID')]",
                        "objectId": "[parameters('ObjectID')]",
                        "permissions": {
                            "keys": [
                                "Get"
                            ],
                            "secrets": [
                                "List",
                                "Get",
                                "Set"
                            ]
                        }
                    }
                ],
                "sku": {
                    "name": "standard",
                    "family": "A"
                }
            },
            "resources": [
                {
                    "type": "secrets",
                    "name": "GitHubPAT",
                    "apiVersion": "2016-10-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    ],
                    "properties": {
                        "value": "[parameters('secretValue')]"
                    }
                }
            ]
        },
        {
            "name": "[variables('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "location": "[resourceGroup().location]",
            "kind": "StorageV2",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('storageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('storageAccountName'), '/default/repoClones')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', variables('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
            "apiVersion": "2020-08-01-preview",
            "name": "[concat(variables('storageAccountName'), '/default/repoTraffic')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', variables('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        },

        {
            "name": "[variables('azureTablesConnectionFriendlyName')]",
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
            "location": "[parameters('location')]",
            "kind": "V1",
            "properties": {
                "displayName": "tableStorageConnector",
                "customParameterValues": {},
                "parameterValues": {
                    "storageaccount":"[variables('storageAccountName')]",
                    "sharedkey":"[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                },
                "api": {
                    "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), variables('azureTablesConnectionFriendlyName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
            "name": "[variables('keyVaultConnectionFriendlyName')]",
            "location": "[parameters('location')]",
            "kind": "V1",
            "properties": {
                "displayName": "keyVaultConnector",
                "customParameterValues": {},
                "parameterValues": {
                    "vaultName":"[parameters('keyVaultName')]",
                    "token":""

                },
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                }
            }
        }, 
    {
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('logicAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'GithubPAT')]",
        "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
        "[resourceId('Microsoft.Web/connections', variables('azureTablesConnectionFriendlyName'))]",
                "[resourceId('Microsoft.Web/connections', variables('keyVaultConnectionFriendlyName'))]"
      ],
      "tags": {
        "displayName": "[parameters('logicAppName')]"
      },
      "apiVersion": "2019-05-01",
      "properties": {
        "state": "Enabled",
        "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Get_secret": {
                "inputs": {
                    "host": {
                        "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                        }
                    },
                    "method": "get",
                    "path": "/secrets/@{encodeURIComponent('GithubPAT')}/value"
                },
                "runAfter": {},
                "type": "ApiConnection"
            },
            "Github_API_-_Clones": {
                "inputs": {
                    "headers": {
                        "Authorization": "token @{body('Get_secret')?['value']}"
                    },
                    "method": "GET",
                    "uri": "[parameters('clonesURI')]"
                },
                "runAfter": {
                    "Get_secret": [
                        "Succeeded"
                    ]
                },
                "type": "Http"
            },
            "Github_API_-_Traffic_Views": {
                "inputs": {
                    "headers": {
                        "Authorization": "token @{body('Get_secret')?['value']}"
                    },
                    "method": "GET",
                    "uri": "[parameters('trafficURI')]"
                },
                "runAfter": {
                    "Get_secret": [
                        "Succeeded"
                    ]
                },
                "type": "Http"
            },
            "Insert_Daily_Clones": {
                "actions": {
                    "Insert_Entity": {
                        "inputs": {
                            "body": {
                                "PartitionKey": "[variables('clonesPK')]",
                                "RowKey": "@guid()",
                                "cloneCount": "@items('Insert_Daily_Clones')?['count']",
                                "cloneUniques": "@items('Insert_Daily_Clones')?['uniques']",
                                "timestamp": "@items('Insert_Daily_Clones')?['timestamp']"
                            },
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['azuretables']['connectionId']"
                                }
                            },
                            "method": "post",
                            "path": "/Tables/@{encodeURIComponent('repoClones')}/entities" 
                        },
                        "runAfter": {},
                        "type": "ApiConnection"
                    }
                },
                "foreach": "@body('Parse_JSON_2')?['clones']",
                "runAfter": {
                    "Parse_JSON_2": [
                        "Succeeded"
                    ]
                },
                "type": "Foreach"
            },
            "Insert_Daily_Views": {
                "actions": {
                    "Insert_Entity_2": {
                        "inputs": {
                            "body": {
                                "PartitionKey": "[variables('trafficPK')]",
                                "RowKey": "@guid()",
                                "timestamp": "@items('Insert_Daily_Views')?['timestamp']",
                                "viewsCount": "@items('Insert_Daily_Views')?['count']",
                                "viewsUniques": "@items('Insert_Daily_Views')?['uniques']"
                            },
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['azuretables']['connectionId']"
                                }
                            },
                            "method": "post",
                            "path": "/Tables/@{encodeURIComponent('repoTraffic')}/entities"
                        },
                        "runAfter": {},
                        "type": "ApiConnection"
                    }
                },
                "foreach": "@body('Parse_JSON')?['views']",
                "runAfter": {
                    "Parse_JSON": [
                        "Succeeded"
                    ]
                },
                "type": "Foreach"
            },
            "Parse_JSON": {
                "inputs": {
                    "content": "@body('Github_API_-_Traffic_Views')",
                    "schema": {
                        "properties": {
                            "count": {
                                "type": "integer"
                            },
                            "uniques": {
                                "type": "integer"
                            },
                            "views": {
                                "items": {
                                    "properties": {
                                        "count": {
                                            "type": "integer"
                                        },
                                        "timestamp": {
                                            "type": "string"
                                        },
                                        "uniques": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "timestamp",
                                        "count",
                                        "uniques"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                },
                "runAfter": {
                    "Github_API_-_Traffic_Views": [
                        "Succeeded"
                    ]
                },
                "type": "ParseJson"
            },
            "Parse_JSON_2": {
                "inputs": {
                    "content": "@body('Github_API_-_Clones')",
                    "schema": {
                        "properties": {
                            "clones": {
                                "items": {
                                    "properties": {
                                        "count": {
                                            "type": "integer"
                                        },
                                        "timestamp": {
                                            "type": "string"
                                        },
                                        "uniques": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "timestamp",
                                        "count",
                                        "uniques"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "count": {
                                "type": "integer"
                            },
                            "uniques": {
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                },
                "runAfter": {
                    "Github_API_-_Clones": [
                        "Succeeded"
                    ]
                },
                "type": "ParseJson"
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "parameters": {
            "$connections": {
                "defaultValue": {},
                "type": "Object"
            }
        },
        "triggers": {
            "Recurrence": {
                "recurrence": {
                    "frequency": "Day",
                    "interval": 1
                },
                "type": "Recurrence"
            }
        }
    },
    "parameters": {
        "$connections": {
            "value": {
                "azuretables": {
                    "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuretables')]",
                    "connectionId": "[resourceId('Microsoft.Web/connections', variables('azureTablesConnectionFriendlyName'))]",
                    "connectionName": "azuretables"
                },
                "keyvault": {
                    "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'keyvault')]",
                    "connectionId": "[resourceId('Microsoft.Web/connections', variables('keyVaultConnectionFriendlyName'))]",
                    "connectionName": "keyvault"

                }
            }
        }
    }
      }
    }
    
        
        
  ]
    
}